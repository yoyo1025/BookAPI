// Code generated by MockGen. DO NOT EDIT.
// Source: .\validator\book_validator.go

// Package validator is a generated GoMock package.
package validator

import (
	model "BookAPI/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBookValidator is a mock of IBookValidator interface.
type MockIBookValidator struct {
	ctrl     *gomock.Controller
	recorder *MockIBookValidatorMockRecorder
}

// MockIBookValidatorMockRecorder is the mock recorder for MockIBookValidator.
type MockIBookValidatorMockRecorder struct {
	mock *MockIBookValidator
}

// NewMockIBookValidator creates a new mock instance.
func NewMockIBookValidator(ctrl *gomock.Controller) *MockIBookValidator {
	mock := &MockIBookValidator{ctrl: ctrl}
	mock.recorder = &MockIBookValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookValidator) EXPECT() *MockIBookValidatorMockRecorder {
	return m.recorder
}

// BookValidate mocks base method.
func (m *MockIBookValidator) BookValidate(book model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookValidate", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookValidate indicates an expected call of BookValidate.
func (mr *MockIBookValidatorMockRecorder) BookValidate(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookValidate", reflect.TypeOf((*MockIBookValidator)(nil).BookValidate), book)
}
