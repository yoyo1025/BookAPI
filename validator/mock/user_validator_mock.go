// Code generated by MockGen. DO NOT EDIT.
// Source: validator/user_validator.go

// Package validator is a generated GoMock package.
package validator

import (
	model "BookAPI/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserValidator is a mock of IUserValidator interface.
type MockIUserValidator struct {
	ctrl     *gomock.Controller
	recorder *MockIUserValidatorMockRecorder
}

// MockIUserValidatorMockRecorder is the mock recorder for MockIUserValidator.
type MockIUserValidatorMockRecorder struct {
	mock *MockIUserValidator
}

// NewMockIUserValidator creates a new mock instance.
func NewMockIUserValidator(ctrl *gomock.Controller) *MockIUserValidator {
	mock := &MockIUserValidator{ctrl: ctrl}
	mock.recorder = &MockIUserValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserValidator) EXPECT() *MockIUserValidatorMockRecorder {
	return m.recorder
}

// UserValidate mocks base method.
func (m *MockIUserValidator) UserValidate(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserValidate", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserValidate indicates an expected call of UserValidate.
func (mr *MockIUserValidatorMockRecorder) UserValidate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserValidate", reflect.TypeOf((*MockIUserValidator)(nil).UserValidate), user)
}
